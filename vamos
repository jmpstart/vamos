#!/bin/bash
# vamos: setup playground
#
# remarks: this script is intended to be `sourced`!
# => thus do not use `exit` in this script

_VAMOS_VERSION=0.1.2
_VAMOS=vamos

#===============================================================================
# usage
# - can only run in unsourced mode with '---usage' option
#===============================================================================

if [ "$*" == "---usage" ]; then
    (return 0 2>/dev/null) && \
        (echo "assertion violation: ---usage"; return 0) && return 1

        # from here we cannot spoil the caller's environment

    VAMOS=$_VAMOS

    $VAMOS -@Y "usage: (vamos version $_VAMOS_VERSION)"

    $VAMOS -@G "session init: (consider to run in .bashrc/.bash_profile)"
    echo "    . $VAMOS                    # BASH session init (install $VAMOS alias)"
    echo ""
    $VAMOS -@G "activate playground (including virtual Python environment):"
    echo "    $VAMOS                      # setup/activate playground"
    echo ""
    $VAMOS -@G "clone & activate playground:"
    echo "    $VAMOS @jmpstart/toy-samples"
    echo "    $VAMOS https://github.com/jmpstart/toy-samples.git"
    echo ""
    $VAMOS -@G "help:"
    echo "    $VAMOS -?                   # show usage"
    echo "    $VAMOS --help               # comprehensive help"
    echo ""

    $VAMOS -@G "tasks:"
    echo "    $VAMOS -a                   # activate virtual playground"
    echo "    $VAMOS -c                   # create virtual Python environment"
    echo "    $VAMOS -d                   # deactivate virtual playground"
    echo "    $VAMOS -e                   # print virtual environment directory"
    echo "    $VAMOS -f                   # find playground root directory"
    echo "    $VAMOS -g <tag> <path>      # curl from github"
    echo "    $VAMOS -i                   # install $VAMOS stuff"
    echo "    $VAMOS -p                   # print virtual environment dir path"
    echo "    $VAMOS -r                   # remove virtual Python environment"
    echo "    $VAMOS -s                   # startup playground"
    echo "    $VAMOS -u                   # uninstall $VAMOS"

    exit 0
fi

#===============================================================================
# comprehensive help
# - can only run in unsourced mode with '---help' option
#===============================================================================

if [ "$*" == "---help" ]; then
    (return 0 2>/dev/null) && \
        (echo "assertion violation: ---help"; return 0) && return 1

        # from here we cannot spoil the caller's environment

    VAMOS=$_VAMOS

    bash $_VAMOS -?                  # usage
    echo ""
    $VAMOS -@G "print colored text:"
    echo "    $VAMOS -@R ...              # echo red text with newline"
    echo "    $VAMOS -@G ...              # echo green text with newline"
    echo "    $VAMOS -@Y ...              # echo yellow text with newline"
    echo "    $VAMOS -@B ...              # echo blue text with newline"
    echo "    $VAMOS -@M ...              # echo magenta text with newline"
    echo "    $VAMOS -@C ...              # echo cyan text with newline"
    echo "    $VAMOS -@N ...              # echo normal text with newline"
    echo ""
    echo "    $VAMOS -@r ...              # print red text without newline"
    echo "    $VAMOS -@g ...              # print green text without newline"
    echo "    $VAMOS -@y ...              # print yellow text without newline"
    echo "    $VAMOS -@b ...              # print blue text without newline"
    echo "    $VAMOS -@m ...              # print magenta text without newline"
    echo "    $VAMOS -@c ...              # print cyan text without newline"
    echo "    $VAMOS -@n ...              # print normal text without newline"
    echo ""
    $VAMOS -@G "other:"
    echo "    $VAMOS --gurl <tag> <path>  # convert github tag to github raw URL"
    echo "    $VAMOS --gtag <url>         # convert github URL to github tag"
    echo "    $VAMOS --version            # print version"
    echo ""
    $VAMOS -@G "curl from  github:"
    echo "    $VAMOS --curl <tag> <path>  # curl from github"
    echo "    $VAMOS --curl @jmpstart/vamos main/util/ec"

    exit 0
fi

#===============================================================================
# default call: `$ vamos` => setup alias in sourced mode or generate error
# - can run in both sourced/unsourced mode
# - if the script is not sourced an error message is generated as this calling
#   syntax can only setup an alias if it is sourced.
#===============================================================================

if [ "$*" == "" ]; then
    (return 0 2>/dev/null) && _SOURCED=1 || _SOURCED=0  # determine _SOURCED

    if [ "$_SOURCED" == 0 ]; then
        vamos -@r 'error: vamos not initialized'
        vamos -@n ' => init with `'
        vamos -@g '. vamos'
        vamos -@n '` (dot-space-vamos)\n'
    else
        alias vamos="source vamos"
        source $_VAMOS -a     # activate
    fi

    unset _SOURCED
    unset _VAMOS_VERSION  # cleanup, since we might run in sourced mode
    unset _VAMOS     # cleanup, since we might run in sourced mode
    return 0 2>/dev/null || exit 0  # safe return/exit
fi

#===============================================================================
# activate virtual environment
# - must run in sourced mode
#===============================================================================

if [ "$*" == "-a" ] || [ "$*" == "-an" ]; then
    (return 0 2>/dev/null) && _SOURCED=1 || _SOURCED=0  # determine _SOURCED
    if [ "$_SOURCED" == 0 ]; then
        $_VAMOS -@r "error: unsourced '$_VAMOS -a'"
        $_VAMOS -@n " => use '"
        $_VAMOS -@g ". $_VAMOS -a"
        $_VAMOS -@n "' or '"
        $_VAMOS -@g ". $_VAMOS; $_VAMOS -a"
        $_VAMOS -@n "'\n"
        unset _SOURCED
        exit 1
    fi

    if  [ -d venv ]; then
        source venv/bin/activate
    elif [ -d .venv ]; then
        source .venv/bin/activate
    else
        _vENV=`$_VAMOS -e` # return virtual environment directory

        if [ "$_vENV" != "" ]; then
            #echo "source $_FILE"
            deactivate 2>/dev/null
            source $_vENV/bin/activate
        elif [ -d ".vamos" ]; then
            bash $_VAMOS -cv     # create (verbose) virtual environment, no unset
            source $_VAMOS -an   # activate virtual environment, no unset
            source $_VAMOS -s    # startup playground
        else
            bash $_VAMOS -@r 'error: no virtual environment directory'
            bash $_VAMOS -@n ' (create with: '
            bash $_VAMOS -@g "$_VAMOS -c"
            bash $_VAMOS -@N ')'
        fi

        unset _vENV
    fi

    if [ "$*" != "-an" ]; then
        unset _VAMOS_VERSION  # cleanup, since we might run in sourced mode
        unset _VAMOS     # cleanup, since we might run in sourced mode
    fi
    return 0 2>/dev/null || exit 0  # safe return/exit
fi

#===============================================================================
# deactivate virtual environment
# - must run in sourced mode
#===============================================================================

if [ "$*" == "-d" ] || [ "$*" == "-dn" ]; then
    (return 0 2>/dev/null) && _SOURCED=1 || _SOURCED=0  # determine _SOURCED
    if [ "$_SOURCED" == 0 ]; then
        $_VAMOS -@r "error: unsourced '$_VAMOS -d'"
        $_VAMOS -@n " => use '"
        $_VAMOS -@g ". $_VAMOS -d"
        $_VAMOS -@n "' or '"
        $_VAMOS -@g ". $_VAMOS; $_VAMOS -d"
        $_VAMOS -@n "'\n"
        unset _SOURCED
        exit 1
    fi

    deactivate 2>/dev/null

    if [ "$*" != "-dn" ]; then
        unset _VAMOS_VERSION  # cleanup, since we might run in sourced mode
        unset _VAMOS     # cleanup, since we might run in sourced mode
    fi
    return 0 2>/dev/null || exit 0  # safe return/exit
fi

#===============================================================================
# remove virtual environment directory
#===============================================================================

if [ "$*" == "-r" ]; then
    (return 0 2>/dev/null) && _SOURCED=1 || _SOURCED=0  # determine _SOURCED
    if [ "$_SOURCED" == 0 ]; then
        $_VAMOS -@r "error: unsourced '$_VAMOS -r'"
        $_VAMOS -@n " => use '"
        $_VAMOS -@g ". $_VAMOS -r"
        $_VAMOS -@n "' or '"
        $_VAMOS -@g ". $_VAMOS; $_VAMOS -r"
        $_VAMOS -@n "'\n"
        unset _SOURCED
        exit 1
    fi

    _vENV=`bash $_VAMOS -e`

    if [ "$_vENV" == "" ]; then
        bash $_VAMOS -@R "error: $_VAMOS -r => no virtual Python environment!"
    else
        source $_VAMOS -dn       # deactivate venv, no unset
        rm -rf $_vENV
        bash $_VAMOS -@G "$_vENV successfully removed"
    fi

    unset _vENV
    unset _VAMOS_VERSION  # cleanup, since we might run in sourced mode
    unset _VAMOS     # cleanup, since we might run in sourced mode
    return 0 2>/dev/null || exit 0  # safe return/exit
fi

#===============================================================================
# startup playground
#===============================================================================

if [ "$*" == "-s" ]; then
    (return 0 2>/dev/null) && _SOURCED=1 || _SOURCED=0  # determine _SOURCED
    if [ "$_SOURCED" == 0 ]; then
        $_VAMOS -@r "error: unsourced '$_VAMOS -s'"
        $_VAMOS -@n " => use '"
        $_VAMOS -@g ". $_VAMOS -s"
        $_VAMOS -@n "' or '"
        $_VAMOS -@g ". $_VAMOS; $_VAMOS -s"
        $_VAMOS -@n "'\n"
        unset _SOURCED
        exit 1
    fi

   bash $_VAMOS -@C 'setup playground'

    _vENV=`bash vamos -e`

    if [ -f .vamos/etc/setup ]; then
        if [ "$_vENV" != "" ] && [ "$VIRTUAL_ENV" != "" ]; then
            bash $_VAMOS -@Y 'source .vamos/etc/setup'
            source .vamos/etc/setup
        fi
    fi

    unset _vENV
    return 0 2>/dev/null || exit 0  # safe return/exit
fi

#===============================================================================
# standard call: . vamos @myplayground/three-samples
# - argument needs to contain at least one slash
#===============================================================================

_TAG="$*";
_TAG=${_TAG#"@"}        # remove leading '@'

if [ "$*" == "@$_TAG" ]; then  # means $_TAG begins with a '@' character
    (return 0 2>/dev/null) && _SOURCED=1 || _SOURCED=0  # determine _SOURCED
    if [ "$_SOURCED" == 0 ]; then
        $_VAMOS -@r "error: unsourced '$_VAMOS @...'"
        $_VAMOS -@n " => use '"
        $_VAMOS -@g ". $_VAMOS @..."
        $_VAMOS -@n "' or '"
        $_VAMOS -@g ". $_VAMOS; $_VAMOS @..."
        $_VAMOS -@n "'\n"

        unset _TAG
        unset _SOURCED
        exit 1
    fi

    _SLASH=0
    echo $1 | grep '/' >/dev/null && _SLASH=1

    if [ $_SLASH == 1 ]; then   # default

            # figure out whether arg $1 has short form `myplayground/sample`
            # or long form `https://github.com/myplayground/sample.git`

        _LONG=0
        echo $* | grep https://github.com/ >/dev/null && _LONG=1

            # clone repository - deal with both short and long form
            # of repository URL

        if [ "$_LONG" == "1" ]; then   # long repo URL
            #echo 'https://github.com prefix'
            _URL="$*";  #_URL=${_URL#"@"}
            _REPO=${_URL#*/}
            bash $_VAMOS -@Y "git clone $_URL"
            git clone $_URL
        else                            # short repo _URL
            TAG="$*";
            TAG=${TAG#"@"}        # remove leading '@'
            _REPO=${TAG#*/}

            _URL=https://github.com/"$TAG.git"
            #echo 'no https://github.com prefix'
            bash $_VAMOS -@Y "git clone $_URL"
            git clone $_URL
        fi

        bash $_VAMOS -@Y "cd $_REPO"
        cd $_REPO

        source $_VAMOS -a  # activate (setup) playground
    fi

    return 0 2>/dev/null || exit 0  # safe return/exit
fi

unset _TAG
unset _URL
unset _REPO
unset _LONG
unset _SLASH
unset _SOURCED

#===============================================================================
#===============================================================================
# from here everything must run in non-sourced mode
#===============================================================================
#===============================================================================

(return 0 2>/dev/null) && _SOURCED=1 || _SOURCED=0  # determine _SOURCED
if [ "$_SOURCED" == 1 ]; then  # is this script running as a sourced script?
    unset _SOURCED
    bash vamos $* || return 1  # execute as child process !!!
    return 0
fi
unset _SOURCED

    # remove arg1 and shift other args left

#if [ "$1" == "-!" ]; then
#    shift  # removes arg1 and shifts other args left
#fi

    # make sure that script is running un-sourced mode

(return 0 2>/dev/null) && (echo "assertion violation"; exit 1)

#===============================================================================
#===============================================================================
# now we are sure that script runs in un-sourced mode:
# 1) any created environment variable will not affect the parent process
# 2) the script may terminate with 'exit' without terminating calling process
#===============================================================================
#===============================================================================

APP=$_VAMOS
VERSION=$_VAMOS_VERSION

ECHO="bash $APP"

RED='\x1b[31m'
GREEN='\x1b[32m'
YELLOW='\x1b[33m'
BLUE='\x1b[34m'
MAGENTA='\x1b[35m'
CYAN='\x1b[36m'
NORMAL='\x1b[0m'

#===============================================================================
# echo colored text with newline
# - vamos -@R ....  # red
# - vamos -@G ....  # green
# - vamos -@Y ....  # yellow
# - vamos -@B ....  # blue
# - vamos -@M ....  # magenta
# - vamos -@C ....  # cyan
# - vamos -@N ....  # normal
#===============================================================================

if [ "$1" == "-@R" ]; then
    shift;  printf $RED;  echo "$*";  printf $NORMAL;  exit 0
fi

if [ "$1" == "-@G" ]; then
    shift;  printf $GREEN;  echo "$*";  printf $NORMAL;  exit 0
fi

if [ "$1" == "-@B" ]; then
    shift;  printf $BLUE;  echo "$*";  printf $NORMAL;  exit 0
fi

if [ "$1" == "-@Y" ]; then
    shift;  printf $YELLOW;  echo "$*";  printf $NORMAL;  exit 0
fi

if [ "$1" == "-@C" ]; then
    shift;  printf $CYAN;  echo "$*";  printf $NORMAL;  exit 0
fi

if [ "$1" == "-@M" ]; then
    shift;  printf $MAGENTA;  echo "$*";  printf $NORMAL;  exit 0
fi

if [ "$1" == "-@N" ]; then
    shift;  printf $NORMAL;   echo "$*";  exit 0
fi

#===============================================================================
# print colored text without newline
# - vamos -@r ....  # red
# - vamos -@g ....  # green
# - vamos -@y ....  # yellow
# - vamos -@b ....  # blue
# - vamos -@m ....  # magenta
# - vamos -@c ....  # cyan
# - vamos -@n ....  # normal
#===============================================================================

if [ "$1" == "-@r" ]; then
    shift;  printf $RED; printf "$*"; exit 0
fi

if [ "$1" == "-@g" ]; then
    shift;  printf $GREEN; printf "$*"; exit 0
fi

if [ "$1" == "-@y" ]; then
    shift;  printf $YELLOW; printf "$*"; exit 0
fi

if [ "$1" == "-@b" ]; then
    shift;  printf $BLUE; printf "$*"; exit 0
fi

if [ "$1" == "-@m" ]; then
    shift;  printf $MAGENTA; printf "$*"; exit 0
fi

if [ "$1" == "-@c" ]; then
    shift;  printf $CYAN; printf "$*"; exit 0
fi

if [ "$1" == "-@n" ]; then
    shift;  printf $NORMAL;  printf "$*"; exit 0
fi

#===============================================================================
# usage
#===============================================================================

if [ "$*" == '-?' ]; then
    bash $APP '---usage'
    exit 0
fi

#===============================================================================
# comprehensive help
#===============================================================================

if [ "$*" == '--help' ]; then
    bash $APP '---help'
    exit 0
fi

#===============================================================================
# create virtual Python environment (folder venv)
#===============================================================================

if [ "$*" == "-c" ] || [ "$*" == "-cv" ]; then
    if [ "$*" == "-cv" ]; then
        $ECHO -@C creating virtual environment
    fi
    source $APP -d  # does not deactivate venv of parent process

    if [ -f .vamos/etc/venv ]; then
        VENV=`bash .vamos/etc/venv`
        if [ "$VENV" = "" ]; then
            VENV=venv   # use default name
        fi
    else
        VENV=venv  # use default name
    fi

    if [ "$*" == "-cv" ]; then
        $ECHO -@Y python3 -m venv $VENV
    fi
    python3 -m venv $VENV    # create virtual Python environment

    if [ "$*" == "-cv" ]; then
        $ECHO -@Y "($VENV) pip install pip --upgrade >/dev/null"
    fi

    source $APP -a   # activate
    pip install pip --upgrade >/dev/null

    if [ "$*" == "-cv" ]; then
        pip list
        $ECHO -@G "virtual environment $VENV created"
    fi
    exit 0
fi

#===============================================================================
# print virtual environment directory
#===============================================================================

if [ "$*" == "-e" ]; then
    if  [ -d venv ]; then
        echo venv
    elif [ -d .venv ]; then
        echo .venv
    else
        DONE=0
        ITEMS=`ls -a`
        for ITEM in $ITEMS; do
            if [ "$ITEM" != "." ] && [ "$ITEM" != ".." ] && [ "$DONE" == 0 ]
            then
                if [ -d "$ITEM" ]; then
                    #echo dir $FILE
                    FILE="$ITEM/bin/activate"
                    if [ -f "$FILE" ]; then
                        echo "$ITEM"
                        DONE=1
	                  fi
                fi
            fi
        done
    fi
    exit 0
fi

#===============================================================================
# convert github tag to github raw URL
# - usage: vamos --gurl @myhub/my-repo
#          vamos --gurl @jmpstart/vamos main/util/ec
# - convert @myhub/my-repo => https://raw.githubusercontent.com/myhub/my-repo
# - add arg3 to URL if provided
#===============================================================================

if [ "$1" == "--curl" ] || [ "$1" == "-g" ]; then
    shift
    _OPTS="-s"
    URL=`bash $APP --gurl $*`
    #echo 'URL:' $URL

    curl $_OPTS $URL

    unset _OPTS
    unset URL
    exit 0
fi

#===============================================================================
# convert github URL to github tag
# - convert https://github.com/myhub/my-repo.git => @myhub/my-repo
#===============================================================================

if [ "$1" == "--gtag" ] && [ "$2" != "" ] && [ "$4" == "" ]; then
    TAG="$2"
    #echo 'initial:' $TAG
    TAG=${TAG%".git"}
    #echo 'strip off suffix:' $TAG
    TAG=${TAG#"https://github.com/"}
    #echo 'strip off prefix:' $TAG

    echo "@$TAG"
    unset TAG
    exit 0
fi

#===============================================================================
# curl from github
# - usage: vamos --curl @myhub/my-repo main/util/ec
#          vamos -g @myhub/my-repo main/util/ec
#===============================================================================

if [ "$1" == "--gurl" ]; then
    if [ "$2" != "" ] && [ "$4" == "" ]; then
        TAG="$2"
        #echo 'initial:' $TAG
        TAG=${TAG#"@"}
        #echo 'strip off prefix:' $TAG

        if [ "$3" == "" ]; then
            echo "https://raw.githubusercontent.com/$TAG"
        else
            echo "https://raw.githubusercontent.com/$TAG/$3"
        fi

        unset TAG
        exit 0
    fi
fi

#===============================================================================
# install vamos stuff
#===============================================================================

if [ "$*" == "-i" ]; then
    VENV=`bash $APP -e`         # virtual environment dir
    if [ ! -d .vamos ] || [ "$VENV" == "" ]; then
        exit 0                  # nothing to do
    fi

    SUBDIRS=`ls .vamos`
    for DIR in $SUBDIRS
    do
        if [ -d ".vamos/$DIR" ] && [ "$DIR" != '.' ] && [ "$DIR" != '..' ]; then
            if [ ! -d "$VENV/$DIR" ]; then
                mkdir "$VENV/$DIR"
            fi

            bash $APP -@C "installing $VENV/$DIR ..."

            FILES=`ls .vamos/$DIR`
            for FILE in $FILES
            do
                if [ -f ".vamos/$DIR/$FILE" ]; then
                    echo "  install $VENV/$DIR/$FILE"
                    cp .vamos/$DIR/$FILE $VENV/$DIR
                fi
            done
        fi
    done
    exit 0
fi

#===============================================================================
# print virtual environment directory path
#===============================================================================

if [ "$*" == '-p' ]; then
    VENV=`bash $APP -e`
    if [ "$VENV" == "" ]; then
        exit 0                      # nothing to do
    fi

    echo `pwd`/$VENV
    exit 0
fi

#===============================================================================
# print vamos target directory
# - with option -t we are not sure wheter running in child or parent process
# - option -t! indicates that the caller launched us as a child process
#===============================================================================

if [ "$*" == "-t" ] || [ "$*" == "-t!" ]; then
    if [ "$1" != "-t!" ]; then  # not sure that we run in a child process
        bash $APP -t!         # run as a child process, call with -t! option
    else  # in the else part we run in a child process
        deactivate 2>/dev/null  # deactivate in child but not parent process
        PYDIR=`which python3`

        if [ "$PYDIR" != "" ]; then
            PYDIR=${PYDIR%"/python3"}
        fi

        echo $PYDIR
    fi
    exit 0
fi

#===============================================================================
# uninstall: $ . vamos -u
#===============================================================================

if [ "$*" == "-u" ] || [ "$*" == "--uninstall" ]; then
    #URL=https://raw.githubusercontent.com/ihux/vamos/main/install
    #curl -s $URL >~vamos; . ~vamos -u
    #unset URL

    _APP=`which $APP`
    ERR=0

    if [ -f ./~vamos ]; then
        rm ./~vamos 2>/dev/null || ERR=1
    fi

    rm $_APP || ERR=2

    if [ "$ERR" == 0 ]; then
        printf $GREEN
        echo "$APP (version $VERSION) succesfully uninstalled"
        printf $NORMAL
    fi

    exit 0
fi

#===============================================================================
# print version: $ . vamos --version
#===============================================================================

if [ "$*" == "--version" ]; then
    echo $VERSION
    exit 0
fi

#===============================================================================
# cleanup
# - since this script is sourced all temporary variables have to be unset
# - otherwise they would be left as garbage in the calling shell
#===============================================================================

$ECHO -@R "error: bad calling syntax: vamos $*"
$APP -?
exit 0
